from ultralytics import YOLO
import cv2
import cvzone

# Initialize the webcam for capturing real-time video feed.
cap = cv2.VideoCapture(0)
cap.set(3, 1280)  # Set the width of the video frame to 1280 pixels.
cap.set(4, 720)  # Set the height of the video frame to 720 pixels.

# Load the best YOLO model for detecting playing cards.
model = YOLO("playingCards.pt")

# List of card class names corresponding to the model's output.
classNames = ['10C', '10D', '10H', '10S',
              '2C', '2D', '2H', '2S',
              '3C', '3D', '3H', '3S',
              '4C', '4D', '4H', '4S',
              '5C', '5D', '5H', '5S',
              '6C', '6D', '6H', '6S',
              '7C', '7D', '7H', '7S',
              '8C', '8D', '8H', '8S',
              '9C', '9D', '9H', '9S',
              'AC', 'AD', 'AH', 'AS',
              'JC', 'JD', 'JH', 'JS',
              'KC', 'KD', 'KH', 'KS',
              'QC', 'QD', 'QH', 'QS']

# Function to calculate the value of a Blackjack hand.
def calculate_blackjack_value(hand):
    value = 0
    aces = 0

    for card in hand:
        rank = card[:-1]
        if rank in ['K', 'Q', 'J']:
            value += 10
        elif rank == 'A':
            aces += 1
            value += 11
        else:
            value += int(rank)

    while value > 21 and aces > 0:
        value -= 10
        aces -= 1

    return value

# Initialize game state variables.
game_over = False
winner_message = ""

# Main loop to process each frame of the video feed.
while True:
    success, img = cap.read()
    results = model(img, stream=True)
    dealer_hand = []  # Cards detected in the dealer's zone.
    player_hand = []  # Cards detected in the player's zone.

    # Initialize default values for dealer and player.
    dealer_value = 0
    player_value = 0

    # Define the zones: dealer (top half) and player (bottom half).
    height, width, _ = img.shape
    dealer_zone = (0, 0, width, height // 2)  # Top half.
    player_zone = (0, height // 2, width, height)  # Bottom half.

    # Draw a line to separate the dealer and player zones.
    separator_y = height // 2
    cv2.line(img, (0, separator_y), (width, separator_y), (0, 255, 255), 3)

    for r in results:
        boxes = r.boxes
        for box in boxes:
            x1, y1, x2, y2 = box.xyxy[0]
            x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

            cls = int(box.cls[0])
            card = classNames[cls]

            # Assign cards based on the zone they appear in.
            if y1 < dealer_zone[3]:  # If the card is in the dealer's zone.
                dealer_hand.append(card)
            elif y1 >= player_zone[1]:  # If the card is in the player's zone.
                player_hand.append(card)

            # Draw bounding boxes around detected cards.
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            # Add label (card name only) near the bounding box.
            label = f"{card}"
            cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Remove duplicates from both hands.
    dealer_hand = list(set(dealer_hand))
    player_hand = list(set(player_hand))

    # Calculate values if the game is not over.
    if not game_over:
        if dealer_hand:
            dealer_value = calculate_blackjack_value(dealer_hand)
            dealer_result = f"Dealer: {dealer_value}"
            cvzone.putTextRect(img, dealer_result, (50, 50), scale=2, thickness=2, colorR=(0, 0, 0), colorB=(255, 255, 255))

        if player_hand:
            player_value = calculate_blackjack_value(player_hand)
            player_result = f"Player: {player_value}"
            cvzone.putTextRect(img, player_result, (50, separator_y + 50), scale=2, thickness=2, colorR=(0, 0, 0), colorB=(255, 255, 255))

    # Display the winner message if the game is over.
    if game_over:
        cvzone.putTextRect(
            img,
            winner_message,
            (width // 2 - 200, height // 2 - 50),  # Centered position
            scale=3,  # Larger text for visibility
            thickness=3,  # Thicker text for better clarity
            colorR=(0, 0, 0),  # Black text
            colorB=(255, 255, 255)  # White background
        )

    # Show the processed video frame with annotations in a window.
    cv2.imshow("Image", img)

    # Handle keyboard inputs.
    key = cv2.waitKey(1) & 0xFF

    # Press "Shift+S" to end the game.
    if key == ord('S'):  # Shift+S corresponds to ASCII code of 'S'.
        game_over = True
        if dealer_value > 21 and player_value > 21:
            winner_message = "Both players busted! No winner."
        elif dealer_value > 21:
            winner_message = "Dealer busted! Player wins!"
        elif player_value > 21:
            winner_message = "Player busted! Dealer wins!"
        elif dealer_value > player_value:
            winner_message = "Dealer wins!"
        elif player_value > dealer_value:
            winner_message = "Player wins!"
        else:
            winner_message = "It's a draw!"

    # Press "Shift+D" to reset the game.
    if key == ord('D'):  # Shift+D corresponds to ASCII code of 'D'.
        game_over = False
        winner_message = ""

    # Press 'q' to exit the program.
    if key == ord('q'):
        break


